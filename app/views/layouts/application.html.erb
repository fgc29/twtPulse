<!DOCTYPE html>
<html>
  <head>
    <title>Twitter Pulse</title>
    <%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-track" => true %>
    <%= javascript_include_tag "application", "data-turbolinks-track" => true %>
    <%= csrf_meta_tags %>
    <meta charset="utf-8">
    <style>
    path {
      stroke: white;
      stroke-width: 0.25px;
      fill: grey;
    }
    </style>
  </head>
  <body>
    <div>
      <% if current_user %>
        Signed in as <strong><%= current_user.name %></strong>!
        <%= link_to "Sign out", signout_path, id: "sign_out" %>
      <% else %>
        <%= link_to "Sign in with Twitter", "/auth/twitter", id: "sign_in" %>
      <% end %>
    </div>
    <div>
    <%= yield %>
    <% if current_user %>
    <span><%= link_to "Start Stream", tweets_search_results_path %></span>
    <script src="http://d3js.org/d3.v3.min.js"></script>
<script src="http://d3js.org/topojson.v0.min.js"></script>
<script>
var width = 600,
    height = 500;

var projection = d3.geo.mercator()
    .center([0, 0 ])
    .scale(100)
    // .rotate([-180,0])
    .translate([width / 2, height / 2]);;

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

var path = d3.geo.path()
    .projection(projection);

var g = svg.append("g");

// load and display the World
d3.json("/assets/topo.json", function(error, topology) {

// load and display the cities
d3.csv("/assets/city.csv", function(error, data) {
//     var colorsArr = ["red", "green", "blue", "purple", "coral", "yellow"];
//     var randomNum = function(min, max) {
//   return Math.floor(Math.random() * (max - min)) + min;
// }
    g.selectAll("circle")
       .data(data)
       .enter()
       .append("a")
				  // .attr("xlink:href", function(d) {
					//   return "https://www.google.com/search?q="+d.city;}
				  // )
       .append("circle")
       .attr("cx", function(d) {
               return projection([d.lon, d.lat])[0];
       })
       .attr("cy", function(d) {
               return projection([d.lon, d.lat])[1];
       })
       .attr("r", 5)
     .style("fill", /*colorsArr[randomNum(0, 5)]*/ "red");
});


g.selectAll("path")
      .data(topojson.object(topology, topology.objects.countries)
          .geometries)
    .enter()
      .append("path")
      .attr("d", path)
});

// zoom and pan
var zoom = d3.behavior.zoom()
    .on("zoom",function() {
        g.attr("transform","translate("+
            d3.event.translate.join(",")+")scale("+d3.event.scale+")");
        g.selectAll("circle")
            .attr("d", path.projection(projection));
        g.selectAll("path")
            .attr("d", path.projection(projection));

  });

// svg.call(zoom)

</script>
<% end %>
    </div>
  </body>
</html>
